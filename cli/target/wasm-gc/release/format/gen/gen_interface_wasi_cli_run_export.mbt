// Generated by `wit-bindgen` 0.45.1. DO NOT EDIT!

///|
pub fn wasmExportAsyncRun() -> Int {
  let task = @ffi.current_task()
  let _ = task.with_waitable_set(fn(task) {
    let return_result : Ref[Result[Unit, Unit]?] = Ref::new(None)
    task.wait(fn() { return_result.val = Some(@run.run()) })
    for {
      if task.no_wait() && return_result.val is Some(return_result) {
        @run.run_task_return(return_result)
        break
      } else {
        @ffi.suspend() catch {
          _ => @ffi.task_cancel()
        }
      }
    }
  })
  if task.is_fail() is Some(@ffi.Cancelled::Cancelled) {
    @ffi.task_cancel()
    return @ffi.CallbackCode::Exit.encode()
  }
  if task.is_done() {
    return @ffi.CallbackCode::Exit.encode()
  }
  return @ffi.CallbackCode::Wait(task.handle()).encode()
}

///|
pub fn wasmExportworldCommandAsyncAsyncRun(
  event_raw : Int,
  waitable : Int,
  code : Int,
) -> Int {
  @ffi.callback(event_raw, waitable, code)
}
